
import com.github.braisdom.jsql.Func;

typedef sql detectName(Symbol name, String scalar) {
    CASE WHEN $name > 0
            THEN 'positive'
         WHEN $name < 0
            THEN $scalar
         ELSE 'zero'
    END
}

-- comment
typedef dataset Member(Timestamp purchaseBegin) {
    projection [
        :id,
        :member_no as member_no,
        if(:name is null, 'unnamed', :name) as name,
        max(:id) as max_member_id,
        Func::caseWhen() as name
    ],
    from [#pumper.member],
    predicate (:status = 1 && :birthday > purchaseBegin),
    join [left(MemberProducts mp, mp.member_id == member.id)],
    group [],
    order [-:id],
    having ()
}

-- comment
func purchasedMember(Array skus, Timestamp purchaseBegin, Timestamp purchaseEnd) {
    var member = new Member(purchaseBegin);

    member.predicates.appendAnd(:birthday ~ (purchaseBegin, purchaseEnd));

    if(skus.length() > 0)
        member.predicates.appendAnd(:id < 10);

    return member;
}