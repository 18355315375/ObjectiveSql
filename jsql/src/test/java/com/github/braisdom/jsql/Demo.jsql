
import com.github.braisdom.jsql.Func;

typedef case DetectName() {
    case member.projections.name
        when
    end
}

-- comment
typedef dataset Member(Timestamp purchaseBegin) {
    projection [
        :id,
        :member_no as member_no,
        {fn if(:name is null, 'unnamed', :name) } as name,
        {fn max(:id) } as max_member_id
    ],
    from [#pumper.member as member],
    predicate (:status = 1 && :birthday > purchaseBegin),
    join [left(MemberProducts as mp, mp.member_id == member.id),],
    group [],
    order [-:id],
    having ()
}

func detectName(Symbol name, String scalar) {
}

-- comment
query purchasedMember(String[] skus, Timestamp purchaseBegin, Timestamp purchaseEnd) {
    var member = new Member(purchaseBegin);

    member.predicates.And(:birthday ~= (purchaseBegin, purchaseEnd));

    if(skus.length > 0)
        member.predicates.And(:id >= 10);

    return member;
}