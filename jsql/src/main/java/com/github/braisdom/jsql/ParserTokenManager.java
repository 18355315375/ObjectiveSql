/* ParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.github.braisdom.jsql;
import java.util.*;
import com.github.braisdom.jsql.ast.*;

/** Token Manager. */
@SuppressWarnings ("unused")
class ParserTokenManager implements ParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x40000L) != 0L)
            return 0;
         if ((active0 & 0x2000000000L) != 0L)
            return 49;
         if ((active0 & 0x100000L) != 0L)
            return 37;
         if ((active0 & 0x40000000000L) != 0L)
         {
            jjmatchedKind = 49;
            return 24;
         }
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 49;
            return 28;
         }
         if ((active0 & 0x1da0000000000L) != 0L)
         {
            jjmatchedKind = 49;
            return 16;
         }
         if ((active0 & 0x1000000000L) != 0L)
            return 50;
         return -1;
      case 1:
         if ((active0 & 0x1be0000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
            return 16;
         }
         if ((active0 & 0x400000000000L) != 0L)
            return 16;
         return -1;
      case 2:
         if ((active0 & 0x3e0000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 2;
            return 16;
         }
         if ((active0 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 3:
         if ((active0 & 0x200000000000L) != 0L)
            return 16;
         if ((active0 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x1e0000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 3;
            return 16;
         }
         return -1;
      case 4:
         if ((active0 & 0x1e0000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 4;
            return 16;
         }
         if ((active0 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0x20000000000L) != 0L)
            return 16;
         if ((active0 & 0x1c0000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 5;
            return 16;
         }
         if ((active0 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0xc0000000000L) != 0L)
            return 16;
         if ((active0 & 0x1800000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 6;
            return 16;
         }
         return -1;
      case 7:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 7;
            return 16;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 8;
            return 16;
         }
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active0 & 0x100000000000L) != 0L)
            return 16;
         if ((active0 & 0x1000000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 49;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 34:
         return jjStartNfaWithStates_0(0, 37, 49);
      case 37:
         return jjStopAtPos(0, 21);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x800000L);
      case 39:
         return jjStartNfaWithStates_0(0, 36, 50);
      case 40:
         return jjStopAtPos(0, 26);
      case 41:
         return jjStopAtPos(0, 27);
      case 42:
         return jjStopAtPos(0, 19);
      case 43:
         return jjStopAtPos(0, 17);
      case 44:
         return jjStopAtPos(0, 33);
      case 45:
         return jjStartNfaWithStates_0(0, 18, 0);
      case 46:
         return jjStopAtPos(0, 34);
      case 47:
         return jjStartNfaWithStates_0(0, 20, 37);
      case 58:
         return jjStopAtPos(0, 35);
      case 59:
         return jjStopAtPos(0, 32);
      case 60:
         jjmatchedKind = 11;
         return jjMoveStringLiteralDfa1_0(0xa000L);
      case 61:
         return jjStopAtPos(0, 9);
      case 62:
         jjmatchedKind = 10;
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 63:
         return jjStopAtPos(0, 12);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x80000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x200000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x1820000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x40000000000L);
      case 123:
         jjmatchedKind = 28;
         return jjMoveStringLiteralDfa1_0(0x100000000000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x400000L);
      case 125:
         return jjStopAtPos(0, 29);
      case 126:
         jjmatchedKind = 25;
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      default :
         return jjMoveNfa_0(5, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         else if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         else if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(1, 16);
         else if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 24);
         break;
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000000L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x300000000000L);
      case 115:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 46, 16);
         return jjMoveStringLiteralDfa2_0(active0, 0x1800000000000L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L);
      case 124:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L);
      case 110:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStopAtPos(2, 56);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x300000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x60000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x80000000000L);
      case 101:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L);
      case 106:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      case 109:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 16);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000000000L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000000L);
      case 101:
         return jjMoveStringLiteralDfa6_0(active0, 0xc0000000000L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000L);
      case 116:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 16);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000000L);
      case 102:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 42, 16);
         break;
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(6, 47);
         break;
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 43, 16);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa8_0(active0, 0x100000000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x100000000000L);
      case 117:
         return jjMoveStringLiteralDfa9_0(active0, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa10_0(active0, 0x1000000000000L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 44, 16);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(10, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(9, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 49;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 37:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(43, 44); }
                  else if (curChar == 47)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 49:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  else if (curChar == 34)
                  {
                     if (kind > 39)
                        kind = 39;
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  else if (curChar == 45)
                     { jjCheckNAddStates(3, 5); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     { jjCheckNAdd(18); }
                  }
                  break;
               case 24:
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAdd(16); }
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  else if (curChar == 45)
                     { jjCheckNAddTwoStates(17, 19); }
                  else if (curChar == 47)
                     { jjAddStates(6, 7); }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 31;
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 11); }
                  else if (curChar == 39)
                     { jjCheckNAddTwoStates(7, 8); }
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 52)
                        kind = 52;
                     { jjCheckNAdd(18); }
                  }
                  else if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAdd(16); }
                  break;
               case 50:
                  { jjCheckNAddTwoStates(7, 8); }
                  if (curChar == 39)
                  {
                     if (kind > 38)
                        kind = 38;
                  }
                  break;
               case 1:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(3, 5); }
                  break;
               case 2:
                  if ((0x2400L & l) != 0L && kind > 8)
                     kind = 8;
                  break;
               case 3:
                  if (curChar == 10 && kind > 8)
                     kind = 8;
                  break;
               case 4:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 6:
                  if (curChar == 39)
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 7:
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 8:
                  if (curChar == 39 && kind > 38)
                     kind = 38;
                  break;
               case 9:
                  if (curChar == 34)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 10:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 11:
                  if (curChar == 34 && kind > 39)
                     kind = 39;
                  break;
               case 13:
                  { jjAddStates(8, 9); }
                  break;
               case 17:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(18); }
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 52)
                     kind = 52;
                  { jjCheckNAdd(18); }
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(19, 20); }
                  break;
               case 20:
                  if (curChar != 46)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(21); }
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 53)
                     kind = 53;
                  { jjCheckNAdd(21); }
                  break;
               case 30:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 33:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddTwoStates(33, 35); }
                  break;
               case 36:
                  if (curChar == 47)
                     { jjAddStates(6, 7); }
                  break;
               case 38:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     { jjCheckNAddStates(0, 2); }
                  break;
               case 39:
                  if ((0x2400L & l) != 0L && kind > 6)
                     kind = 6;
                  break;
               case 40:
                  if (curChar == 10 && kind > 6)
                     kind = 6;
                  break;
               case 41:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 43:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 44:
                  if (curChar == 42)
                     { jjAddStates(10, 11); }
                  break;
               case 45:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(46, 44); }
                  break;
               case 46:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(46, 44); }
                  break;
               case 47:
                  if (curChar == 47 && kind > 7)
                     kind = 7;
                  break;
               case 48:
                  if (curChar == 45)
                     { jjCheckNAddTwoStates(17, 19); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
               case 10:
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 24:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     { jjCheckNAdd(16); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 5:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     { jjCheckNAdd(16); }
                  }
                  else if (curChar == 96)
                     { jjCheckNAdd(13); }
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 28:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 49)
                        kind = 49;
                     { jjCheckNAdd(16); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 50:
               case 7:
                  { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 1:
                  { jjAddStates(3, 5); }
                  break;
               case 12:
                  if (curChar == 96)
                     { jjCheckNAdd(13); }
                  break;
               case 13:
                  if ((0xfffffffeffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(13, 14); }
                  break;
               case 14:
                  if (curChar == 96 && kind > 40)
                     kind = 40;
                  break;
               case 15:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAdd(16); }
                  break;
               case 16:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 49)
                     kind = 49;
                  { jjCheckNAdd(16); }
                  break;
               case 22:
                  if (curChar == 101 && kind > 54)
                     kind = 54;
                  break;
               case 23:
                  if (curChar == 117)
                     { jjCheckNAdd(22); }
                  break;
               case 25:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 115)
                     { jjCheckNAdd(22); }
                  break;
               case 27:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 29:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 31:
               case 32:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 34:
               case 35:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 55)
                     kind = 55;
                  { jjCheckNAddTwoStates(33, 35); }
                  break;
               case 38:
                  { jjAddStates(0, 2); }
                  break;
               case 43:
                  { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 45:
               case 46:
                  { jjCheckNAddTwoStates(46, 44); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 49:
               case 10:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 50:
               case 7:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(7, 8); }
                  break;
               case 1:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(3, 5); }
                  break;
               case 13:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(8, 9); }
                  break;
               case 38:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjAddStates(0, 2); }
                  break;
               case 43:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(43, 44); }
                  break;
               case 45:
               case 46:
                  if (jjCanMove_0(hiByte, i1, i2, l1, l2))
                     { jjCheckNAddTwoStates(46, 44); }
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 49 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, "\75", "\76", "\74", 
"\77", "\74\75", "\76\75", "\74\76", "\41\75", "\53", "\55", "\52", "\57", "\45", 
"\174\174", "\46\46", "\176\75", "\176", "\50", "\51", "\173", "\175", "\133", "\135", 
"\73", "\54", "\56", "\72", "\47", "\42", null, null, null, 
"\151\155\160\157\162\164", "\164\171\160\145\144\145\146", "\144\141\164\141\163\145\164", 
"\160\162\157\152\145\143\164\151\157\156", "\146\162\157\155", "\141\163", "\151\163\40\156\165\154\154", 
"\151\163\40\156\157\164\40\156\165\154\154", null, null, null, null, null, null, null, "\173\146\156", };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   t = Token.newToken(jjmatchedKind, curTokenImage);

   return t;
}
static final int[] jjnextStates = {
   38, 39, 41, 1, 2, 4, 37, 42, 13, 14, 45, 47, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public ParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public ParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 49; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0x1f3fffffffffe01L, 
};
static final long[] jjtoSkip = {
   0x1feL, 
};
static final long[] jjtoSpecial = {
   0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[49];
    private final int[] jjstateSet = new int[2 * 49];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
