/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package com.github.braisdom.jsql;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int EQ = 9;
  /** RegularExpression Id. */
  int GT = 10;
  /** RegularExpression Id. */
  int LT = 11;
  /** RegularExpression Id. */
  int HOOK = 12;
  /** RegularExpression Id. */
  int LE = 13;
  /** RegularExpression Id. */
  int GE = 14;
  /** RegularExpression Id. */
  int NE = 15;
  /** RegularExpression Id. */
  int NE2 = 16;
  /** RegularExpression Id. */
  int PLUS = 17;
  /** RegularExpression Id. */
  int MINUS = 18;
  /** RegularExpression Id. */
  int STAR = 19;
  /** RegularExpression Id. */
  int SLASH = 20;
  /** RegularExpression Id. */
  int PERCENT_REMAINDER = 21;
  /** RegularExpression Id. */
  int SC_OR = 22;
  /** RegularExpression Id. */
  int SC_AND = 23;
  /** RegularExpression Id. */
  int IN = 24;
  /** RegularExpression Id. */
  int BETWEEN = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LBRACE = 28;
  /** RegularExpression Id. */
  int RBRACE = 29;
  /** RegularExpression Id. */
  int LBRACKET = 30;
  /** RegularExpression Id. */
  int RBRACKET = 31;
  /** RegularExpression Id. */
  int SEMICOLON = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int COLON = 35;
  /** RegularExpression Id. */
  int QUOTE = 36;
  /** RegularExpression Id. */
  int DOUBLE_QUOTE = 37;
  /** RegularExpression Id. */
  int STRINGVAL = 38;
  /** RegularExpression Id. */
  int DBSTRINGVAL = 39;
  /** RegularExpression Id. */
  int BACK_QUOTED_IDENTIFIER = 40;
  /** RegularExpression Id. */
  int IMPORT = 41;
  /** RegularExpression Id. */
  int TYPEDEF = 42;
  /** RegularExpression Id. */
  int DATASET = 43;
  /** RegularExpression Id. */
  int PROJECTION = 44;
  /** RegularExpression Id. */
  int FROM = 45;
  /** RegularExpression Id. */
  int AS = 46;
  /** RegularExpression Id. */
  int IS_NULL = 47;
  /** RegularExpression Id. */
  int IS_NOT_NULL = 48;
  /** RegularExpression Id. */
  int IDENTIFIER = 49;
  /** RegularExpression Id. */
  int LETTER = 50;
  /** RegularExpression Id. */
  int DIGIT = 51;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 52;
  /** RegularExpression Id. */
  int FLOATING_LITERAL = 53;
  /** RegularExpression Id. */
  int BOOLEAN_LITERAL = 54;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "<token of kind 8>",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"?\"",
    "\"<=\"",
    "\">=\"",
    "\"<>\"",
    "\"!=\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\"||\"",
    "\"&&\"",
    "\"~=\"",
    "\"~\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\":\"",
    "\"\\\'\"",
    "\"\\\"\"",
    "<STRINGVAL>",
    "<DBSTRINGVAL>",
    "<BACK_QUOTED_IDENTIFIER>",
    "\"import\"",
    "\"typedef\"",
    "\"dataset\"",
    "\"projection\"",
    "\"from\"",
    "\"as\"",
    "\"is null\"",
    "\"is not null\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<DECIMAL_LITERAL>",
    "<FLOATING_LITERAL>",
    "<BOOLEAN_LITERAL>",
    "\"#\"",
  };

}
