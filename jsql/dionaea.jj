options {
    LOOKAHEAD = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    KEEP_LINE_COLUMN = false;
    UNICODE_INPUT = true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(Parser)

package com.github.braisdom.jsql;

import java.util.*;
import com.github.braisdom.jsql.ast.*;

public final class Parser {

    public static String unquote(String value, String quote) {
        if (value.startsWith(quote) && (value.endsWith(quote))) {
            return value.substring(1, value.length() - 1);
        }
        return value;
    }
}

PARSER_END(Parser)

SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
| < "--" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

TOKEN :
{
    < EQ: "==" >
|   < GT: ">" >
|   < LT: "<" >
|   < LE: "<=" >
|   < GE: ">=" >
|   < NE: "!=" >
|   < SC_OR: "||" >
|   < SC_AND: "&&" >
}

TOKEN:
{
    < IN: "&=" >
|   < BETWEEN: "~=" >
|   < LIKE: "~" >
}

TOKEN:
{
   < PLUS: "+" >
|   < MINUS: "-" >
|   < STAR: "*" >
|   < SLASH: "/" >
|   < REM: "%" >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
}

TOKEN :
{
  < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
| < QUOTE: "'" >
| < DOUBLE_QUOTE: "\"" >
}

TOKEN : {
    < STRINGVAL: ( "'" ( ~["'"] | ["\'"] )* "'") > |
    < DBSTRINGVAL: ( "\"" ( ~["\""] )* "\"") > |
    < BACK_QUOTED_IDENTIFIER: "`" ( (~["`"]) )+ "`" >
}

TOKEN : {
    < IMPORT : "import" > |
    < TYPEDEF : "typedef" > |
    < DATASET : "dataset" > |
    < PROJECTION : "projection" > |
    < FROM : "from" > |
    < AS : "as" > |
    < NULL : "null" >
}

TOKEN : {
    < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* > |
    < #LETTER: ["_", "a"-"z", "A"-"Z"] > |
    < #DIGIT: ["0"-"9"] > |
    < DECIMAL_LITERAL: (["-"])? ["1"-"9"] (["0"-"9"])* > |
    < FLOATING_LITERAL: (["-"])? (["0"-"9"])+ "." (["0"-"9"])*  >|
    < BOOLEAN_LITERAL: ("true" | "false") >
}

JSqlNode JSqlNode():
{
    final JSqlNode jsqlNode = new JSqlNode();
    ImportNode importNode;
    DatasetNode datasetNode;
}
{
    (
        importNode = ImportNode() { jsqlNode.addImportNode(importNode); } |
        datasetNode = DatasetNode() { jsqlNode.addDatasetNode(datasetNode); }
    )* { return jsqlNode; }
}

ImportNode ImportNode():
{
    ImportNode importNode;
    String importDeclaration;
}
{
    ( <IMPORT> importDeclaration = Name() { importNode = new ImportNode(importDeclaration); } <SEMICOLON> )
    {
        return importNode;
    }
}

DatasetNode DatasetNode():
{
    final DatasetNode datasetNode = new DatasetNode();
    FormalParameterNode parameter;
    Projectional projectional;
}
{
    (
        <TYPEDEF> <DATASET> <IDENTIFIER> { datasetNode.setName(getToken(0).image); }
        "("
            parameter = FormalParameterNode() { datasetNode.addFormalParameter(parameter); }
            ( "," parameter = FormalParameterNode() { datasetNode.addFormalParameter(parameter); } )*
        ")"
        "{"
            <PROJECTION>
            ("[" Projectional(datasetNode) ( "," Projectional(datasetNode))* "]")
        "}"
    )
    { return datasetNode; }
}

FormalParameterNode FormalParameterNode():
{
    String type;
    String name;
}
{
    (<IDENTIFIER> { type = getToken(0).image; } <IDENTIFIER> { name = getToken(0).image; })
    { return new FormalParameterNode(type, name); }
}

void Projectional(DatasetNode datasetNode):
{
    Projectional projectional = null;
    Token token;
}
{
    [
        (projectional = SymbolNode() [ "as" token = <IDENTIFIER> { projectional.setAlias(token.image); } ] ) |
        (projectional = SqlLiteral() [ "as" token = <IDENTIFIER> { projectional.setAlias(token.image); } ] ) |
        (projectional = SqlFunctionCallNode() "as" token = <IDENTIFIER> { projectional.setAlias(token.image); } )
    ] {  datasetNode.addProjectional(projectional); }
}

SqlFunctionCallNode SqlFunctionCallNode():
{
    SqlFunctionCallNode sqlFunctionCallNode = new SqlFunctionCallNode();
    SqlFunctionOperand operand;
}
{
    (
        [ LOOKAHEAD(2) ( <IDENTIFIER> { sqlFunctionCallNode.setType(token.image); } "." )]
        <IDENTIFIER> { sqlFunctionCallNode.setName(getToken(0).image); }
        "("
            [
                operand = SqlFunctionOperand() { sqlFunctionCallNode.addOperands(operand); }
                ( "," operand = SqlFunctionOperand() { sqlFunctionCallNode.addOperands(operand); } )*
            ]
        ")"
    ) { return sqlFunctionCallNode; }
}

SqlFunctionOperand SqlFunctionOperand():
{
    SqlFunctionOperand operand;
}
{
    (
        operand = SqlLiteral() { return operand; } |
        operand = SymbolNode() { return operand; } |
        operand = SqlFunctionCallNode() { return operand; }
    )
}

ExpressionNode ExpressionNode():
{
    ExpressionNode expressionNode = new ExpressionNode();
}
{
    (
        ( ExpressionNodeOperand() ( ExpressionOperator() ExpressionNodeOperand() )* ) |
        ( "(" ( ExpressionNodeOperand() ( ExpressionOperator() ExpressionNodeOperand() )* ) ")" ) *
    ) { return expressionNode; }
}

ExpressionNode.Operand ExpressionNodeOperand():
{
    ExpressionNode.Operand operand;
}
{
    (
        operand = SqlLiteral() { return operand; } |
        operand = SymbolNode() { return operand; }
    )
}

String ExpressionOperator():
{
}
{
    (
        <PLUS> { return token.image; } |
        <MINUS> { return token.image; } |
        <STAR> { return token.image; } |
        <SLASH> { return token.image; } |
        <REM> { return token.image; }
    )
}

InOperatorNode InOperatorNode():
{
    InOperatorNode inOperatorNode;
    InOperatorNode.Operand operand;
    SymbolNode symbolNode;

}
{
    (
        symbolNode = SymbolNode() <IN>
        "("
            operand = InOperatorNodeOperand() { inOperatorNode.addItem(operand); }
            ( "," operand = InOperatorNodeOperand() { inOperatorNode.addItem(operand); } )*
        ")"
    )
}

InOperatorNode.Operand InOperatorNodeOperand():
{
    InOperatorNode.Operand operand;
}
{
    [
        operand = SqlLiteral() |
        operand = SymbolNode()
    ] { return operand; }
}

SqlLiteral SqlLiteral():
{
    Object value = null;
    Token token;
}
{
    ( token = <STRINGVAL> { value = token.image; } |
      token = <DECIMAL_LITERAL> { value = Integer.parseInt(token.image); } |
      token = <FLOATING_LITERAL> { value = Float.parseFloat(token.image); }
    ) { return new SqlLiteral(value); }
}

SymbolNode SymbolNode():
{
    SymbolNode symbolNode = new SymbolNode();
}
{
    (
        ( ":" <IDENTIFIER> ) { symbolNode.setSymbolName(token.image); } |
        LOOKAHEAD(2) ( "#" <IDENTIFIER> { symbolNode.setSymbolName(token.image); } ) |
        LOOKAHEAD(3) ( "#" <IDENTIFIER> { symbolNode.setDatasetName(token.image); }
                       "." <IDENTIFIER> { symbolNode.setSymbolName(token.image); } )
    )
    { return symbolNode; }
}

String Name():
{
    List<String> names = new ArrayList();
}
{
  ( <IDENTIFIER> { names.add(getToken(0).image); } ( <DOT> <IDENTIFIER> { names.add(getToken(0).image); })* )
  { return String.join(".", names.toArray(new String[0])); }
}
