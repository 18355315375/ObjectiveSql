options {
    LOOKAHEAD = 1;
    CHOICE_AMBIGUITY_CHECK = 3;
    OTHER_AMBIGUITY_CHECK = 2;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    KEEP_LINE_COLUMN = false;
    UNICODE_INPUT = true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(Parser)

package com.github.braisdom.jsql;

import java.util.*;
import com.github.braisdom.jsql.ast.*;

public final class Parser {

    public static String unquote(String value, String quote) {
        if (value.startsWith(quote) && (value.endsWith(quote))) {
            return value.substring(1, value.length() - 1);
        }
        return value;
    }
}

PARSER_END(Parser)

SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
| < "--" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

TOKEN :
{
    < EQ: "=" >
|   < GT: ">" >
|   < LT: "<" >
|   < HOOK: "?" >
|   < LE: "<=" >
|   < GE: ">=" >
|   < NE: "<>" >
|   < NE2: "!=" >
|   < PLUS: "+" >
|   < MINUS: "-" >
|   < STAR: "*" >
|   < SLASH: "/" >
|   < PERCENT_REMAINDER: "%" >
}

TOKEN :
{
    < SC_OR: "||" >
|   < SC_AND: "&&" >
|   < IN: "~=" >
|   < BETWEEN: "~" >

}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
| < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
| < QUOTE: "'" >
| < DOUBLE_QUOTE: "\"" >
}

TOKEN : {
    < STRINGVAL: ( "'" ( ~["'"] | ["\'"] )* "'") > |
    < DBSTRINGVAL: ( "\"" ( ~["\""] )* "\"") > |
    < BACK_QUOTED_IDENTIFIER: "`" ( (~["`"]) )+ "`" >
}

TOKEN : {
    < IMPORT : "import" > |
    < DATASET : "dataset" > |
    < PROJECTION : "projection" > |
    < FROM : "from" > |
    < AS : "as" >
}

TOKEN : {
    < IDENTIFIER: <LETTER> (<LETTER> | <DIGIT>)* > |
    < #LETTER: ["_", "a"-"z", "A"-"Z"] > |
    < #DIGIT: ["0"-"9"] > |
    < DECIMAL_LITERAL: ["-"] ["1"-"9"] (["0"-"9"])* > |
    < FLOATING_LITERAL: ["-"] (["0"-"9"])+ "." (["0"-"9"])*  >|
    < BOOLEAN_LITERAL: ("true" | "false") > |
    < SYMBOL: ":" <IDENTIFIER> > |
    < DATASET_REF: "#" <IDENTIFIER> ("." <IDENTIFIER>)* >
}

JSqlNode JSqlNode():
{
    final JSqlNode jsqlNode = new JSqlNode();
    ImportNode importNode;
    DatasetNode datasetNode;
}
{
    (
        importNode = ImportNode() { jsqlNode.addImportNode(importNode); } |
        datasetNode = DatasetNode() { jsqlNode.addDatasetNode(datasetNode); }
    )* { return jsqlNode; }
}

ImportNode ImportNode():
{
    ImportNode importNode;
    String importDeclaration;
}
{
    ( <IMPORT> importDeclaration = Name() { importNode = new ImportNode(importDeclaration); } <SEMICOLON> )
    {
        return importNode;
    }
}

DatasetNode DatasetNode():
{
    final DatasetNode datasetNode = new DatasetNode();
    FormalParameterNode parameter;
    Projectional projectional;
}
{
    (
        <DATASET> <IDENTIFIER> { datasetNode.setName(getToken(0).image); }
        "("
            parameter = FormalParameterNode() { datasetNode.addFormalParameter(parameter); }
            ( "," parameter = FormalParameterNode() { datasetNode.addFormalParameter(parameter); } )*
        ")"
        <LBRACE>
            <PROJECTION>
                "{"
                    (
                        Projectional(datasetNode) ( "," Projectional(datasetNode))*
                    )
                "}"
        <RBRACE>
    )
    { return datasetNode; }
}

FormalParameterNode FormalParameterNode():
{
    String type;
    String name;
}
{
    (<IDENTIFIER> { type = getToken(0).image; } <IDENTIFIER> { name = getToken(0).image; })
    { return new FormalParameterNode(type, name); }
}

void Projectional(DatasetNode datasetNode):
{
    Projectional projectional = null;
    Token token;
}
{
    [
        (projectional = SymbolNode() "as" token = <IDENTIFIER> { projectional.setAlias(token.image); } ) |
        (projectional = ScalarNode() "as" token = <IDENTIFIER> { projectional.setAlias(token.image); })
    ] {  datasetNode.addProjectional(projectional); }
}

SqlFunctionCallNode SqlFunctionCallNode():
{
    SqlFunctionCallNode sqlFunctionCallNode = new SqlFunctionCallNode();
    Token expr;
}
{
    (
        <IDENTIFIER> { sqlFunctionCallNode.setName(getToken(0).image); }
        <LPAREN> expr = <IDENTIFIER> { sqlFunctionCallNode.setExpression(expr.image); } <RPAREN>
    ) { return sqlFunctionCallNode; }
}

ScalarNode ScalarNode():
{
    Object value = null;
    Token token;
}
{
    ( token = <STRINGVAL> { value = token.image; } |
      token = <DECIMAL_LITERAL> { value = Integer.parseInteger(token.image); } |
      token = <FLOATING_LITERAL> { value = Float.parseFloat(token.image); } |
      token = <BOOLEAN_LITERAL> { value = Boolean.parseBoolean(token.image); }
    ) { return new ScalarNode(value); }
}

SymbolNode SymbolNode():
{
    Token token;
}
{
    ( ":" token = <IDENTIFIER> ) { return new SymbolNode(token.image); }
}

String Name():
{
    List<String> names = new ArrayList();
}
{
  ( <IDENTIFIER> { names.add(getToken(0).image); } ( <DOT> <IDENTIFIER> { names.add(getToken(0).image); })* )
  { return String.join(".", names.toArray(new String[0])); }
}
