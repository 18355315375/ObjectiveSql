options {
    LOOKAHEAD = 1;
    STATIC = false;
    DEBUG_PARSER = false;
    DEBUG_LOOKAHEAD = false;
    DEBUG_TOKEN_MANAGER = false;
    KEEP_LINE_COLUMN = false;
    UNICODE_INPUT = true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}

PARSER_BEGIN(Parser)

package com.github.braisdom.jds;

import java.util.*;
import com.github.braisdom.jds.ast.*;

public final class Parser {

    public static String unquote(String value, String quote) {
        if (value.startsWith(quote) && (value.endsWith(quote))) {
            return value.substring(1, value.length() - 1);
        }
        return value;
    }
}

PARSER_END(Parser)

SKIP :
{
    " "
|   "\t"
|   "\n"
|   "\r"
|   "\f"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/">
| < "--" (~["\n","\r"])* ("\n" | "\r" | "\r\n") >
}

TOKEN :
{
    < EQ: "==" >
|   < GT: ">" >
|   < LT: "<" >
|   < LE: "<=" >
|   < GE: ">=" >
|   < NE: "!=" >
}

TOKEN :
{
    < SC_OR: "||" >
|   < SC_AND: "&&" >
}

TOKEN:
{
    < IN: "&=" >
|   < BETWEEN: "~=" >
|   < LIKE: "~" >
}

TOKEN:
{
   < PLUS: "+" >
|   < MINUS: "-" >
|   < STAR: "*" >
|   < SLASH: "/" >
|   < REM: "%" >
}

TOKEN :
{
  < LPAREN: "(" >
| < RPAREN: ")" >
| < LBRACE: "{" >
| < RBRACE: "}" >
| < LBRACKET: "[" >
| < RBRACKET: "]" >
}

TOKEN :
{
  < SEMICOLON: ";" >
| < COMMA: "," >
| < DOT: "." >
| < COLON: ":" >
| < QUOTE: "'" >
| < DOUBLE_QUOTE: "\"" >
}

TOKEN : {
    < STRINGVAL: ( "'" ( ~["'","\n","\r"] )* "'") > |
    < DBSTRINGVAL: ( "\"" ( ~["\"","\n","\r"] )* "\"") > |
    < BACK_QUOTED_IDENTIFIER: "`" ( (~["`"]) )+ "`" > |
    < PROJECTION_ALIAS: (<QUOTE> ( <IDENTIFIER> )* <QUOTE>) >
}

TOKEN : {
    < IMPORT : "import" > |
    < TYPEDEF : "typedef" > |
    < DATASET : "dataset" > |
    < PROJECTION : "projection" > |
    < FROM : "from" > |
    < PREDICATE : "predicate" > |
    < AS : "->" > |
    < RETURN : "return" > |
    < NULL : "null" >
}

TOKEN : {
    < JSYMBOL : "JSymbol" > |
    < JPROJECTION : "JProjection" > |
    < JTYPE : "JType" > |
    < JPREDICATE : "JPredicate" > |
    < JQuery : "JQuery" >
}


TOKEN : {
    < TYPE_NAME: (["A"-"Z"]) (<IDENTIFIER>)* > |
    < IDENTIFIER: (["a"-"z"] | ["A"-"Z"]) (<LETTER> | <DIGIT>)* > |
    < #LETTER: ("_" | ["a"-"z"] | ["A"-"Z"]) > |
    < #DIGIT: ["0"-"9"] > |
    < DECIMAL_LITERAL: (["-"])? ["1"-"9"] (["0"-"9"])* > |
    < ZERO: "0" > |
    < NUMBER_SIGN: "#" > |
    < FLOATING_LITERAL: (["-"])? (["0"-"9"])+ "." (["0"-"9"])*  >|
    < BOOLEAN_LITERAL: ("true" | "false") >
}

SqlNode SqlNode():
{
    final SqlNode sqlNode = new SqlNode();
    ImportNode importNode;
    DatasetNode datasetNode;
}
{
    (
        importNode = ImportNode() { sqlNode.addImportNode(importNode); } |
        datasetNode = DatasetNode() { sqlNode.addDatasetNode(datasetNode); }
    )* { return sqlNode; }
}

ImportNode ImportNode():
{
    ImportNode importNode;
    String importDeclaration;
}
{
    ( <IMPORT> importDeclaration = Name() { importNode = new ImportNode(importDeclaration); } <SEMICOLON> )
    {
        return importNode;
    }
}

DatasetNode DatasetNode():
{
    final DatasetNode datasetNode = new DatasetNode();
    FromNode fromNode;
    LogicExpressionNode logicExpressionNode;
}
{
    (
        <TYPEDEF> <DATASET> <TYPE_NAME> { datasetNode.setName(getToken(0).image); } "(" DatasetParameter(datasetNode) ")"
        "{"
            <PROJECTION> ProjectionList(datasetNode)<COMMA>
            <FROM> FromNode(datasetNode)
            [ <COMMA> <PREDICATE> "(" logicExpressionNode = LogicExpressionNode() ")" { datasetNode.setPredicate(logicExpressionNode); } ]
        "}"
    )
    { return datasetNode; }
}

void DatasetParameter(DatasetNode datasetNode) :
{
    FormalParameterNode parameter;
}
{
    parameter = FormalParameterNode() { datasetNode.addFormalParameter(parameter); }
    ( "," parameter = FormalParameterNode() { datasetNode.addFormalParameter(parameter); } )*
}

void ProjectionList(DatasetNode datasetNode) :
{
    Projectional projectional;
}
{
    (
        "["
            (projectional = Projectional() { datasetNode.addProjectional(projectional); })

            (
                (<COMMA> projectional = Projectional() { datasetNode.addProjectional(projectional); })
            )*
        "]"
    )
}

Projectional Projectional():
{
    Projectional projectional = null;
}
{
    (
        ( projectional = SqlLiteral() (<AS> <STRINGVAL> { projectional.setAlias(token.image); })  ) |
        ( projectional = SymbolNode() (<AS> <STRINGVAL> { projectional.setAlias(token.image); })  ) |
        ( projectional = SqlFunctionCallNode() (<AS> <STRINGVAL> { projectional.setAlias(token.image); })  )
    ) { return projectional; }
}

void FromNode(DatasetNode dataset):
{
    FromNode fromNode;
}
{
    fromNode = SymbolNode() { dataset.setFromNode(fromNode); }
}

FormalParameterNode FormalParameterNode():
{
    String type;
    String name;
}
{
    (<TYPE_NAME> { type = getToken(0).image; } <IDENTIFIER> { name = getToken(0).image; })
    { return new FormalParameterNode(type, name); }
}

SqlFunctionCallNode SqlFunctionCallNode():
{
    SqlFunctionCallNode sqlFunctionCallNode = new SqlFunctionCallNode();
    SqlFunctionOperand operand;
}
{
    (
        [
            LOOKAHEAD(2)
            ( <TYPE_NAME> { sqlFunctionCallNode.setType(token.image); } "." )
        ]
        ( ( <IDENTIFIER> | <TYPE_NAME> ) { sqlFunctionCallNode.setName(getToken(0).image); })
        <LPAREN>
            [
                operand = SqlFunctionOperand() { sqlFunctionCallNode.addOperands(operand); }
                ( "," operand = SqlFunctionOperand() { sqlFunctionCallNode.addOperands(operand); } )*
            ]
        <RPAREN>
    ) { return sqlFunctionCallNode; }
}

SqlFunctionOperand SqlFunctionOperand():
{
    SqlFunctionOperand operand;
}
{
    (
        operand = SqlLiteral() { return operand; } |
        operand = SymbolNode() { return operand; } |
        operand = SqlFunctionCallNode() { return operand; }
    )
}

ExpressionNode ExpressionNode():
{
    ExpressionNode expressionNode = new ExpressionNode();
    ExpressionOperand left;
    String operator;
    ExpressionOperand right;
}
{
    (
        (
            LOOKAHEAD(2)
            left = ExpressionOperand() { expressionNode.setLeft(left); }
            operator = ExpressionOperator() { expressionNode.setOperator(operator); }
            right = ExpressionOperand() { expressionNode.setRight(right); }
        )*
    ) { return expressionNode; }
}

ExpressionOperand ExpressionOperand():
{
    ExpressionOperand operand = null;
    ExpressionNode expressionNode;
}
{
    (
        operand = SqlLiteral() { return operand; } |
        operand = SymbolNode() { return operand; } |
        "(" expressionNode = ExpressionNode() ")"
        {
            expressionNode.setEnclosed(true);
            return expressionNode;
        }
    )
}

LogicExpressionNode LogicExpressionNode():
{
    LogicExpressionNode logicExpressionNode = new LogicExpressionNode();
    String operator;
}
{
    (
        ( LogicExpressionOperand(logicExpressionNode) )
        (
            operator = LogicOperator() { logicExpressionNode.addOperand(operator);  }
            LogicExpressionOperand(logicExpressionNode)
        )*
    ) { return logicExpressionNode; }
}

void LogicExpressionOperand(LogicExpressionNode logicExpressionNode):
{
    LogicExpressionOperand operand = null;
}
{
    (
        LOOKAHEAD(3)
        operand = CompareExpressionNode() { logicExpressionNode.addOperand(operand); } |
        ( "(" operand = CompareExpressionNode() ")" ) { logicExpressionNode.add(new EnclosedExpression(operand)); }
    )
}

CompareExpressionNode CompareExpressionNode():
{
    CompareExpressionNode compareExpression = new CompareExpressionNode();
    CompareExpressionOperand left;
    CompareExpressionOperand right;
}
{
    (
        (
            LOOKAHEAD(2)
            left = CompareExpressionOperand() { compareExpression.setLeft(left); }
            CompareOperator() { compareExpression.setOperator(token.image); }
            right = CompareExpressionOperand() { compareExpression.setRight(right); }
        )*
    ) { return compareExpression; }
}

CompareExpressionOperand CompareExpressionOperand():
{
    CompareExpressionNode compareExpressionNode = null;
    CompareExpressionOperand operand;
}
{
    (
        LOOKAHEAD(2) operand = SqlLiteral() { return operand; } |
        LOOKAHEAD(4) operand = SymbolNode() { return operand; } |
        LOOKAHEAD("(" CompareExpressionNode() ")") "(" compareExpressionNode = CompareExpressionNode() ")"
        {
            compareExpressionNode.setEnclosed(true);
            return compareExpressionNode;
        }
    )
}

String ExpressionOperator():
{
}
{
    (
        <PLUS> { return token.image; } |
        <MINUS> { return token.image; } |
        <STAR> { return token.image; } |
        <SLASH> { return token.image; } |
        <REM> { return token.image; }
    )
}

String LogicOperator() :
{
}
{
    <SC_AND> { return token.image; } |
    <SC_OR> { return token.image; }
}

String CompareOperator() :
{
}
{
    <EQ> { return token.image; } |
    <GT> { return token.image; } |
    <GE> { return token.image; } |
    <NE> { return token.image; } |
    <LT> { return token.image; } |
    <LE> { return token.image; }
}

SqlLiteral SqlLiteral():
{
    Object value = null;
    Token token;
}
{
    ( token = <STRINGVAL> { value = token.image; } |
      token = <DECIMAL_LITERAL> { value = Integer.parseInt(token.image); } |
      token = <FLOATING_LITERAL> { value = Float.parseFloat(token.image); } |
      token = <ZERO> { value = Integer.parseInt(token.image); } |
      token = <NULL> { value = null; }
    ) { return new SqlLiteral(value); }
}

SymbolNode SymbolNode():
{
    SymbolNode symbolNode = new SymbolNode();
}
{
    (
        ( <COLON> <IDENTIFIER> ) { symbolNode.setSymbolName(token.image); } |
        ( <NUMBER_SIGN> <IDENTIFIER> { symbolNode.setDatasetName(token.image); } [ "." <IDENTIFIER> { symbolNode.setSymbolName(token.image); } ] )
    )
    { return symbolNode; }
}

String Name():
{
    List<String> names = new ArrayList();
}
{
  ( <IDENTIFIER> { names.add(getToken(0).image); } ( <DOT> <IDENTIFIER> { names.add(getToken(0).image); })* )
  { return String.join(".", names.toArray(new String[0])); }
}
